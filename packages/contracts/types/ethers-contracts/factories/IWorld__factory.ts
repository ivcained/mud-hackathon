/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IWorld, IWorldInterface } from "../IWorld";

const _abi = [
  {
    type: "function",
    name: "addSpecialVoter",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_voter",
        type: "address",
        internalType: "address",
      },
      {
        name: "voteSum",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "call",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "funcSelectorAndArgs",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "changeAdmin",
    inputs: [
      {
        name: "_newAdmin",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "createHackathon",
    inputs: [
      {
        name: "_prizeToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "_startTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_submitPeriod",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_votingPeriod",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_withdrawalPeriod",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_winnerCount",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "_hackathonInfo",
        type: "tuple",
        internalType: "struct HackathonInfoData",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "uri",
            type: "string",
            internalType: "string",
          },
          {
            name: "imageUri",
            type: "string",
            internalType: "string",
          },
          {
            name: "description",
            type: "string",
            internalType: "string",
          },
        ],
      },
      {
        name: "_voteNft",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deleteHackathon",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deleteHackathonByAdmin",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deleteRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "deleteRecord",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositPrize",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "depositPrizeEth",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_amount",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "function",
    name: "emitEphemeralRecord",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "emitEphemeralRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "getAdministrator",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "address",
        internalType: "address",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getField",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getFieldLength",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "schema",
        type: "bytes32",
        internalType: "Schema",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getFieldSlice",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "schema",
        type: "bytes32",
        internalType: "Schema",
      },
      {
        name: "start",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "end",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getHackathon",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct HackathonData",
        components: [
          {
            name: "owner",
            type: "address",
            internalType: "address",
          },
          {
            name: "prizeToken",
            type: "address",
            internalType: "address",
          },
          {
            name: "phase",
            type: "uint8",
            internalType: "uint8",
          },
          {
            name: "startTimestamp",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "submitPeriod",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "votingPeriod",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "withdrawalPeriod",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "winnerCount",
            type: "uint8",
            internalType: "uint8",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getHackathonInfo",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct HackathonInfoData",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "uri",
            type: "string",
            internalType: "string",
          },
          {
            name: "imageUri",
            type: "string",
            internalType: "string",
          },
          {
            name: "description",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getHackathonPrize",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct HackathonPrizeData",
        components: [
          {
            name: "deposit",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "submitters",
            type: "address[]",
            internalType: "address[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getHackathonSponsor",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256[]",
        internalType: "uint256[]",
      },
      {
        name: "",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getHackathonVoteNft",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct HackathonVoteNftData",
        components: [
          {
            name: "voteNft",
            type: "address",
            internalType: "address",
          },
          {
            name: "specialVoters",
            type: "address[]",
            internalType: "address[]",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getKeySchema",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "schema",
        type: "bytes32",
        internalType: "Schema",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getMaxHackathonId",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schema",
        type: "bytes32",
        internalType: "Schema",
      },
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
    ],
    outputs: [
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSchema",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [
      {
        name: "schema",
        type: "bytes32",
        internalType: "Schema",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSpecialVote",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_voter",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "getSubmission",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_submitter",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [
      {
        name: "",
        type: "tuple",
        internalType: "struct SubmissionData",
        components: [
          {
            name: "votes",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "withdrawalPrize",
            type: "uint256",
            internalType: "uint256",
          },
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "description",
            type: "string",
            internalType: "string",
          },
          {
            name: "uri",
            type: "string",
            internalType: "string",
          },
          {
            name: "imageUri",
            type: "string",
            internalType: "string",
          },
        ],
      },
    ],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "grantAccess",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "grantee",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "increment",
    inputs: [],
    outputs: [
      {
        name: "",
        type: "uint32",
        internalType: "uint32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "installModule",
    inputs: [
      {
        name: "module",
        type: "address",
        internalType: "contract IModule",
      },
      {
        name: "args",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "installRootModule",
    inputs: [
      {
        name: "module",
        type: "address",
        internalType: "contract IModule",
      },
      {
        name: "args",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "isStore",
    inputs: [],
    outputs: [],
    stateMutability: "view",
  },
  {
    type: "function",
    name: "popFromField",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "byteLengthToPop",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "popFromField",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "byteLengthToPop",
        type: "uint256",
        internalType: "uint256",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "proceedPhase",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "pushToField",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "dataToPush",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "pushToField",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "dataToPush",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerFunctionSelector",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "systemFunctionName",
        type: "string",
        internalType: "string",
      },
      {
        name: "systemFunctionArguments",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [
      {
        name: "worldFunctionSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerHook",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "hook",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerNamespace",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerRootFunctionSelector",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "worldFunctionSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
      {
        name: "systemFunctionSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    outputs: [
      {
        name: "",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerSchema",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "schema",
        type: "bytes32",
        internalType: "Schema",
      },
      {
        name: "keySchema",
        type: "bytes32",
        internalType: "Schema",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerStoreHook",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "hook",
        type: "address",
        internalType: "contract IStoreHook",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerSystem",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "system",
        type: "address",
        internalType: "contract System",
      },
      {
        name: "publicAccess",
        type: "bool",
        internalType: "bool",
      },
    ],
    outputs: [
      {
        name: "resourceSelector",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerSystemHook",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "hook",
        type: "address",
        internalType: "contract ISystemHook",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerTable",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "valueSchema",
        type: "bytes32",
        internalType: "Schema",
      },
      {
        name: "keySchema",
        type: "bytes32",
        internalType: "Schema",
      },
    ],
    outputs: [
      {
        name: "resourceSelector",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "registerTableHook",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "hook",
        type: "address",
        internalType: "contract IStoreHook",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "revokeAccess",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "grantee",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setAdmin",
    inputs: [
      {
        name: "_newAdmin",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setField",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setField",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setMetadata",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "tableName",
        type: "string",
        internalType: "string",
      },
      {
        name: "fieldNames",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setMetadata",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tableName",
        type: "string",
        internalType: "string",
      },
      {
        name: "fieldNames",
        type: "string[]",
        internalType: "string[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setRecord",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "setRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "data",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "submit",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_name",
        type: "string",
        internalType: "string",
      },
      {
        name: "_description",
        type: "string",
        internalType: "string",
      },
      {
        name: "_uri",
        type: "string",
        internalType: "string",
      },
      {
        name: "_imageUri",
        type: "string",
        internalType: "string",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateHackathon",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "_prizeToken",
        type: "address",
        internalType: "address",
      },
      {
        name: "_startTimestamp",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_submitPeriod",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_votingPeriod",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_withdrawalPeriod",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "_winnerCount",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "_hackathonInfo",
        type: "tuple",
        internalType: "struct HackathonInfoData",
        components: [
          {
            name: "name",
            type: "string",
            internalType: "string",
          },
          {
            name: "uri",
            type: "string",
            internalType: "string",
          },
          {
            name: "imageUri",
            type: "string",
            internalType: "string",
          },
          {
            name: "description",
            type: "string",
            internalType: "string",
          },
        ],
      },
      {
        name: "_voteNft",
        type: "address",
        internalType: "address",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateInField",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "startByteIndex",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "dataToSet",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "updateInField",
    inputs: [
      {
        name: "namespace",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "name",
        type: "bytes16",
        internalType: "bytes16",
      },
      {
        name: "key",
        type: "bytes32[]",
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        internalType: "uint8",
      },
      {
        name: "startByteIndex",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "dataToSet",
        type: "bytes",
        internalType: "bytes",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "vote",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "submissionAddresses",
        type: "address[]",
        internalType: "address[]",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "withdrawByOwner",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "nonpayable",
  },
  {
    type: "function",
    name: "withdrawPrize",
    inputs: [
      {
        name: "_hackathonId",
        type: "bytes32",
        internalType: "bytes32",
      },
    ],
    outputs: [],
    stateMutability: "payable",
  },
  {
    type: "event",
    name: "HelloWorld",
    inputs: [],
    anonymous: false,
  },
  {
    type: "event",
    name: "StoreDeleteRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        indexed: false,
        internalType: "bytes32[]",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StoreEphemeralRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        indexed: false,
        internalType: "bytes32[]",
      },
      {
        name: "data",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StoreSetField",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        indexed: false,
        internalType: "bytes32[]",
      },
      {
        name: "schemaIndex",
        type: "uint8",
        indexed: false,
        internalType: "uint8",
      },
      {
        name: "data",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "event",
    name: "StoreSetRecord",
    inputs: [
      {
        name: "table",
        type: "bytes32",
        indexed: false,
        internalType: "bytes32",
      },
      {
        name: "key",
        type: "bytes32[]",
        indexed: false,
        internalType: "bytes32[]",
      },
      {
        name: "data",
        type: "bytes",
        indexed: false,
        internalType: "bytes",
      },
    ],
    anonymous: false,
  },
  {
    type: "error",
    name: "AccessDenied",
    inputs: [
      {
        name: "resource",
        type: "string",
        internalType: "string",
      },
      {
        name: "caller",
        type: "address",
        internalType: "address",
      },
    ],
  },
  {
    type: "error",
    name: "FunctionSelectorExists",
    inputs: [
      {
        name: "functionSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
  },
  {
    type: "error",
    name: "FunctionSelectorNotFound",
    inputs: [
      {
        name: "functionSelector",
        type: "bytes4",
        internalType: "bytes4",
      },
    ],
  },
  {
    type: "error",
    name: "InvalidSelector",
    inputs: [
      {
        name: "resource",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "ModuleAlreadyInstalled",
    inputs: [
      {
        name: "module",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "ResourceExists",
    inputs: [
      {
        name: "resource",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "ResourceNotFound",
    inputs: [
      {
        name: "resource",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "StoreCore_DataIndexOverflow",
    inputs: [
      {
        name: "length",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "received",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "StoreCore_InvalidDataLength",
    inputs: [
      {
        name: "expected",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "received",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "StoreCore_InvalidFieldNamesLength",
    inputs: [
      {
        name: "expected",
        type: "uint256",
        internalType: "uint256",
      },
      {
        name: "received",
        type: "uint256",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "error",
    name: "StoreCore_NotDynamicField",
    inputs: [],
  },
  {
    type: "error",
    name: "StoreCore_NotImplemented",
    inputs: [],
  },
  {
    type: "error",
    name: "StoreCore_TableAlreadyExists",
    inputs: [
      {
        name: "tableId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tableIdString",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "StoreCore_TableNotFound",
    inputs: [
      {
        name: "tableId",
        type: "bytes32",
        internalType: "bytes32",
      },
      {
        name: "tableIdString",
        type: "string",
        internalType: "string",
      },
    ],
  },
  {
    type: "error",
    name: "SystemExists",
    inputs: [
      {
        name: "system",
        type: "address",
        internalType: "address",
      },
    ],
  },
] as const;

export class IWorld__factory {
  static readonly abi = _abi;
  static createInterface(): IWorldInterface {
    return new utils.Interface(_abi) as IWorldInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IWorld {
    return new Contract(address, _abi, signerOrProvider) as IWorld;
  }
}
